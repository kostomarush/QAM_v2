# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QAM_modulation.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from ModulationPy import QAMModem
from scipy import special
import matplotlib.pyplot as plt
import numpy as np
import numpy
import random
import matlab.engine

eng = matlab.engine.start_matlab()
noize = 0

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1108, 628)
        MainWindow.setMinimumSize(QtCore.QSize(1108,590))
        MainWindow.setMaximumSize(QtCore.QSize(1108, 590))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, -20, 1111, 611))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("Resours/2.jpg"))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(-46, -40, 1201, 221))
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 16777212))
        self.label_2.setSizeIncrement(QtCore.QSize(0, 0))
        self.label_2.setFocusPolicy(QtCore.Qt.TabFocus)
        self.label_2.setStyleSheet("")
        self.label_2.setInputMethodHints(QtCore.Qt.ImhNone)
        self.label_2.setWordWrap(False)
        self.label_2.setIndent(-1)
        self.label_2.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(41, 163, 320, 90))
        self.pushButton.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 85, 127);")
        self.pushButton.setObjectName("pushButton")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(420, 180, 271, 91))
        font = QtGui.QFont()
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.comboBox.setFont(font)
        self.comboBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox.setAutoFillBackground(False)
        self.comboBox.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 85, 127);")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(408, 150, 171, 31))
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(420, 320, 281, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(400, 290, 201, 31))
        self.label_4.setObjectName("label_4")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(420, 380, 281, 31))
        self.lineEdit_3.setInputMethodHints(QtCore.Qt.ImhNone)
        self.lineEdit_3.setReadOnly(True)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(402, 349, 210, 31))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(375, 432, 721, 131))
        self.label_6.setText("")
        self.label_6.setPixmap(QtGui.QPixmap("Resours/Tract.jpg"))
        self.label_6.setObjectName("label_6")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(737, 318, 351, 91))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 85, 127);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(40, 484, 321, 81))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 85, 127);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(971, 180, 51, 20))
        self.lineEdit_2.setMinimumSize(QtCore.QSize(51, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(722, 179, 251, 21))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(722, 205, 201, 21))
        self.label_8.setObjectName("label_8")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(925, 206, 51, 20))
        self.lineEdit_4.setMinimumSize(QtCore.QSize(51, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(1039, 235, 51, 20))
        self.lineEdit_5.setMinimumSize(QtCore.QSize(51, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(722, 234, 321, 21))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(722, 262, 321, 21))
        self.label_10.setObjectName("label_10")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(1042, 262, 51, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(40, 356, 321, 121))
        self.textBrowser.setObjectName("textBrowser")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(40, 297, 321, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.horizontalSlider.setFont(font)
        self.horizontalSlider.setAutoFillBackground(False)
        self.horizontalSlider.setInputMethodHints(QtCore.Qt.ImhNone)
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setSingleStep(10)
        self.horizontalSlider.setPageStep(0)
        self.horizontalSlider.setProperty("value", 0)
        self.horizontalSlider.setSliderPosition(0)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setInvertedAppearance(False)
        self.horizontalSlider.setInvertedControls(False)
        self.horizontalSlider.setTickPosition(QtWidgets.QSlider.TicksAbove)
        self.horizontalSlider.setTickInterval(0)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(41, 284, 16, 20))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(68, 284, 21, 20))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(100, 284, 21, 20))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(131, 284, 21, 20))
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(161, 284, 21, 20))
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(192, 284, 21, 20))
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(223, 284, 21, 20))
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(254, 284, 21, 20))
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(286, 284, 21, 20))
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(317, 284, 21, 20))
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.centralwidget)
        self.label_21.setGeometry(QtCore.QRect(980, 800, 21, 20))
        self.label_21.setObjectName("label_21")
        self.label_22 = QtWidgets.QLabel(self.centralwidget)
        self.label_22.setGeometry(QtCore.QRect(344, 284, 31, 20))
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.centralwidget)
        self.label_23.setGeometry(QtCore.QRect(61, 329, 400, 31))
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(self.centralwidget)
        self.label_24.setGeometry(QtCore.QRect(60, 259, 135, 16))
        self.label_24.setObjectName("label_24")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1108, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        self.comboBox.setCurrentIndex(-1)
        self.comboBox_2.setCurrentIndex(-1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton.clicked.connect(self.click)
        self.pushButton_4.clicked.connect(self.click_4)
        self.horizontalSlider.valueChanged[int].connect(self.click_2)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Квадратурная амплитудная модуляция"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; font-weight:600; color:#ffffff;\">Квадратурная амплитудная</span></p><p align=\"center\"><span style=\" font-size:36pt; font-weight:600; color:#ffffff;\">модуляция </span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Сигнальное созвездие"))
        self.comboBox.setToolTip(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.comboBox.setWhatsThis(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.comboBox.setItemText(0, _translate("MainWindow", "КАМ-4"))
        self.comboBox.setItemText(1, _translate("MainWindow", "КАМ-16"))
        self.comboBox.setItemText(2, _translate("MainWindow", "КАМ-64"))
        self.comboBox.setItemText(3, _translate("MainWindow", "КАМ-256"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">Виды модуляции:</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">Входное сообщение:</span></p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">Выходное сообщение:</span></p></body></html>"))
        self.pushButton_4.setText(_translate("MainWindow", "Рассчет коэффициентов \n"
" битовых ошибок \n"
" с добавлением АБГШ"))
        self.pushButton_6.setText(_translate("MainWindow", "Информация о \n"
" программе"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600; color:#ffffff;\">Количество символов кадре:</span></p><p><span style=\" font-size:12pt;\"><br/></span></p></body></html>"))
        self.label_8.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600; color:#ffffff;\">Количество испытаний:</span></p><p><span style=\" font-size:12pt; color:#ffffff;\"><br/></span></p></body></html>"))
        self.label_9.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600; color:#ffffff;\">Массив отношения сигнал/шум в дБ:</span></p><p><span style=\" font-size:12pt; color:#ffffff;\"><br/></span></p></body></html>"))
        self.label_10.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600; color:#ffffff;\">Анализируемый вид модуляции: КАМ</span></p></body></html>"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "4"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "16"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "64"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "256"))
        self.label_11.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">0</span></p></body></html>"))
        self.label_12.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">10</span></p></body></html>"))
        self.label_13.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">20</span></p></body></html>"))
        self.label_14.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">30</span></p></body></html>"))
        self.label_15.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">40</span></p></body></html>"))
        self.label_16.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">50</span></p></body></html>"))
        self.label_17.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">60</span></p></body></html>"))
        self.label_18.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">70</span></p></body></html>"))
        self.label_19.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">80</span></p></body></html>"))
        self.label_20.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">90</span></p></body></html>"))
        self.label_21.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">80</span></p></body></html>"))
        self.label_22.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ff0000;\">100</span></p></body></html>"))
        self.label_23.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">Модуляция входного сообщения:</span></p></body></html>"))
        self.label_24.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; font-weight:600; color:#ffffff;\">Уровень шума в дБ:</span></p></body></html>"))


    def click(self):
        global noize

        if self.comboBox.currentText() == "":
            error = QMessageBox()
            error.setWindowTitle("Ошибка")
            error.setText("Выберите вид модуляции")
            error.setIcon(QMessageBox.Warning)
            error.exec_()

        elif noize == 0:
            if self.comboBox.currentText()=="КАМ-4":
                modem = QAMModem(4,
                              gray_map=False,
                              bin_input=True)

                modem.plot_const()
            elif self.comboBox.currentText()=="КАМ-16":
                modem = QAMModem(16,
                                  gray_map=False,
                                  bin_input=True)

                modem.plot_const()
            elif self.comboBox.currentText()=="КАМ-64":
                modem = QAMModem(64,
                              gray_map=False,
                              bin_input=True)

                modem.plot_const()
            elif self.comboBox.currentText()=="КАМ-256":
                modem = QAMModem(256,
                              gray_map=False,
                              bin_input=True)

                modem.plot_const()

        elif noize > 1 and noize <= 9:
            if self.comboBox.currentText() == "КАМ-4":
                info = QMessageBox()
                info.setWindowTitle('Внимание')
                info.setText("Подождите, идет построение графика...")
                info.setIcon(QMessageBox.Information)
                #info.setStandardButtons(QMessageBox.NoButton)
                info.exec_()
                eng.qw(4., len(self.lineEdit.text())*1000, 0.009, nargout=0)

            if self.comboBox.currentText() == "КАМ-16":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(16., len(self.lineEdit.text())*1000, 0.009, nargout=0)

            if self.comboBox.currentText() == "КАМ-64":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                if len(self.lineEdit.text())>12:
                    mas = 30000
                else:
                    mas = 3000
                eng.qw(64., mas, 0.009, nargout=0)

            if self.comboBox.currentText() == "КАМ-256":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(256., len(self.lineEdit.text())*1000, 0.0009, nargout=0)

        elif noize > 9 and noize <= 19:
            if self.comboBox.currentText() == "КАМ-4":
                info = QMessageBox()
                info.setWindowTitle('Внимание')
                info.setText("Подождите, идет построение графика...")
                info.setIcon(QMessageBox.Information)
                #info.setStandardButtons(QMessageBox.NoButton)
                info.exec_()
                eng.qw(4., len(self.lineEdit.text())*1000, 0.002, nargout=0)

            if self.comboBox.currentText() == "КАМ-16":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(16., len(self.lineEdit.text())*1000, 0.002, nargout=0)

            if self.comboBox.currentText() == "КАМ-64":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                if len(self.lineEdit.text())>12:
                    mas = 30000
                else:
                    mas = 3000
                eng.qw(64., mas, 0.02, nargout=0)

            if self.comboBox.currentText() == "КАМ-256":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(256., len(self.lineEdit.text())*1000, 0.0002, nargout=0)

        elif noize > 19 and noize <= 39:
            if self.comboBox.currentText() == "КАМ-4":
                info = QMessageBox()
                info.setWindowTitle('Внимание')
                info.setText("Подождите, идет построение графика...")
                info.setIcon(QMessageBox.Information)
                #info.setStandardButtons(QMessageBox.NoButton)
                info.exec_()
                eng.qw(4., len(self.lineEdit.text())*1000, 0.04, nargout=0)

            if self.comboBox.currentText() == "КАМ-16":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(16., len(self.lineEdit.text())*1000, 0.04, nargout=0)

            if self.comboBox.currentText() == "КАМ-64":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                if len(self.lineEdit.text())>12:
                    mas = 30000
                else:
                    mas = 3000
                eng.qw(64., mas, 0.04, nargout=0)

            if self.comboBox.currentText() == "КАМ-256":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(256., len(self.lineEdit.text())*1000, 0.004, nargout=0)

        elif noize > 39 and noize <= 45:
            if self.comboBox.currentText() == "КАМ-4":
                info = QMessageBox()
                info.setWindowTitle('Внимание')
                info.setText("Подождите, идет построение графика...")
                info.setIcon(QMessageBox.Information)
                #info.setStandardButtons(QMessageBox.NoButton)
                info.exec_()
                eng.qw(4., len(self.lineEdit.text())*1000, 0.06, nargout=0)

            if self.comboBox.currentText() == "КАМ-16":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(16., len(self.lineEdit.text())*1000, 0.06, nargout=0)

            if self.comboBox.currentText() == "КАМ-64":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                if len(self.lineEdit.text())>12:
                    mas = 30000
                else:
                    mas = 3000
                eng.qw(64., mas, 0.06, nargout=0)

            if self.comboBox.currentText() == "КАМ-256":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(256., len(self.lineEdit.text())*1000, 0.006, nargout=0)

        elif noize > 45 and noize <= 55:
            if self.comboBox.currentText() == "КАМ-4":
                info = QMessageBox()
                info.setWindowTitle('Внимание')
                info.setText("Подождите, идет построение графика...")
                info.setIcon(QMessageBox.Information)
                #info.setStandardButtons(QMessageBox.NoButton)
                eng.qw(4., len(self.lineEdit.text())*1000, 0.08, nargout=0)
                info.exec_()

            if self.comboBox.currentText() == "КАМ-16":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(16., len(self.lineEdit.text())*1000, 0.08, nargout=0)

            if self.comboBox.currentText() == "КАМ-64":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                if len(self.lineEdit.text())>12:
                    mas = 30000
                else:
                    mas = 3000
                error.exec_()
                eng.qw(64., mas, 0.08, nargout=0)

            if self.comboBox.currentText() == "КАМ-256":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                if len(self.lineEdit.text())>12:
                    k = 10000
                else:
                    k = 1000
                eng.qw(256., len(self.lineEdit.text())*1000, 0.008, nargout=0)

        elif noize > 55 and noize <= 64 :
            if self.comboBox.currentText() == "КАМ-4":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(4., len(self.lineEdit.text())*1000, 0.1, nargout=0)

            if self.comboBox.currentText() == "КАМ-16":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(16., len(self.lineEdit.text())*1000, 0.1, nargout=0)

            if self.comboBox.currentText() == "КАМ-64":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                if len(self.lineEdit.text())>12:
                    mas = 30000
                else:
                    mas = 3000
                eng.qw(64., mas, 0.1, nargout=0)


            if self.comboBox.currentText() == "КАМ-256":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                if len(self.lineEdit.text())>12:
                    k = 1000
                else:
                    k = 10000
                eng.qw(256., len(self.lineEdit.text())*k, 0.01, nargout=0)


        elif noize > 64 and noize <= 88:
            if self.comboBox.currentText() == "КАМ-4":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(4., len(self.lineEdit.text())*1000, 0.6, nargout=0)

            if self.comboBox.currentText() == "КАМ-16":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(16., len(self.lineEdit.text())*1000, 0.3, nargout=0)


            if self.comboBox.currentText() == "КАМ-64":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                if len(self.lineEdit.text())>12:
                    mas = 30000
                else:
                    mas = 3000
                error.exec_()
                eng.qw(64., mas, 0.1, nargout=0)


            if self.comboBox.currentText() == "КАМ-256":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                if len(self.lineEdit.text())>12:
                    k = 1000
                else:
                    k = 10000
                eng.qw(256., len(self.lineEdit.text())*k, 0.09, nargout=0)


        elif noize > 88:
            if self.comboBox.currentText() == "КАМ-4":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(4., len(self.lineEdit.text())*1000, 1., nargout=0)


            if self.comboBox.currentText() == "КАМ-16":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                eng.qw(16., len(self.lineEdit.text())*1000, 1., nargout=0)

            if self.comboBox.currentText() == "КАМ-64":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                if len(self.lineEdit.text())>12:
                    mas = 30000
                else:
                    mas = 3000
                error.exec_()
                eng.qw(64., mas, 1., nargout=0)

            if self.comboBox.currentText() == "КАМ-256":
                error = QMessageBox()
                error.setWindowTitle("Внимание")
                error.setText("Подождите, идет построение графика...")
                error.setIcon(QMessageBox.Information)
                error.exec_()
                if len(self.lineEdit.text())>12:
                    k = 10000
                else:
                    k = 1000
                eng.qw(256., len(self.lineEdit.text())*k, 1., nargout=0)

    ''' 
    
    
    Модуляция и думодуляция 
    с изменением можности
    
    
    '''

    def click_2(self, value):
        # Натройка цвета
        global noize
        noize = value
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(8)
        Palette = QtGui.QPalette()
        Palette.setColor(QtGui.QPalette.Text, QtCore.Qt.black)
        self.lineEdit_3.setFont(font)
        self.lineEdit_3.setPalette(Palette)
        self.textBrowser.setPalette(Palette)
        self.textBrowser.setFont(font)

        # Преобращование текста в двоичный код

        def text_to_bits(text, encoding='utf-8', errors='ignore'):
            bits = bin(int.from_bytes(text.encode(encoding, errors), 'big'))[2:]
            return bits.zfill(8 * ((len(bits) + 7) // 8))

        def text_from_bits(bits, encoding='utf-8', errors='ignore'):
            n = int(bits, 2)
            return n.to_bytes((n.bit_length() + 7) // 8, 'big').decode(encoding, errors) or '\0'

        # Модуляция и Демодуляция

        if self.comboBox.currentText() == "КАМ-4":
            modem = QAMModem(4,
                             bin_input=True,
                             soft_decision=False,
                             bin_output=True)

            msg = text_to_bits(self.lineEdit.text())

            l_list = []
            for x in msg:
                for y in list(x):
                    l_list.append(y)
            if value > 21:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                else:
                    l_list[random_index] = '1'
            if value > 55:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'

                else:
                    l_list[random_index] = '1'
            if value > 64:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                else:
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
            g = [int(x) for x in l_list if x.isdigit()]
            modulated = modem.modulate(g)  # modulation
            if value > 88:
                l_list = ''
                k = 'АВАРИЯ'
                self.textBrowser.setText(str(k))
                fontt = QtGui.QFont()
                fontt.setPointSize(55)
                fontt.setBold(True)
                fontt.setWeight(200)
                font = QtGui.QFont()
                font.setPointSize(15)
                font.setBold(True)
                font.setWeight(200)
                Palette = QtGui.QPalette()
                Palette.setColor(QtGui.QPalette.Text, QtCore.Qt.red)
                self.lineEdit_3.setPalette(Palette)
                self.lineEdit_3.setFont(font)
                self.textBrowser.setPalette(Palette)
                self.textBrowser.setFont(fontt)
            else:
                self.textBrowser.setText(str(modulated))
                demodulated = modem.demodulate(modulated)

                gg1 = "".join([str(x) for x in list(demodulated.astype(numpy.int64))])

                k = text_from_bits(gg1)
            if value == random.randint(0, 100):
                l_list = ''
                k = 'АВАРИЯ'
                self.textBrowser.setText(str(k))
                fontt = QtGui.QFont()
                fontt.setPointSize(55)
                fontt.setBold(True)
                fontt.setWeight(200)
                font = QtGui.QFont()
                font.setPointSize(8)
                font.setBold(True)
                font.setWeight(200)
                Palette = QtGui.QPalette()
                Palette.setColor(QtGui.QPalette.Text, QtCore.Qt.red)
                self.lineEdit_3.setPalette(Palette)
                self.lineEdit_3.setFont(font)
                self.textBrowser.setPalette(Palette)
                self.textBrowser.setFont(fontt)
            self.lineEdit_3.setText(str(k))


            # КАМ-16

        if self.comboBox.currentText() == "КАМ-16":
            modem = QAMModem(16,
                             bin_input=True,
                             soft_decision=False,
                             bin_output=True)

            msg = text_to_bits(self.lineEdit.text())

            l_list = []
            for x in msg:
                for y in list(x):
                    l_list.append(y)

            if value > 20:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                else:
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
            if value > 49:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'

                else:
                    l_list[random_index] = '1'
            if value > 59:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                else:
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
            g = [int(x) for x in l_list if x.isdigit()]
            modulated = modem.modulate(g)  # modulation
            if value > 76:
                l_list = ''
                k = 'АВАРИЯ'
                self.textBrowser.setText(str(k))
                fontt = QtGui.QFont()
                fontt.setPointSize(55)
                fontt.setBold(True)
                fontt.setWeight(200)
                font = QtGui.QFont()
                font.setPointSize(15)
                font.setBold(True)
                font.setWeight(200)
                Palette = QtGui.QPalette()
                Palette.setColor(QtGui.QPalette.Text, QtCore.Qt.red)
                self.lineEdit_3.setPalette(Palette)
                self.lineEdit_3.setFont(font)
                self.textBrowser.setPalette(Palette)
                self.textBrowser.setFont(fontt)
            else:
                self.textBrowser.setText(str(modulated))
                demodulated = modem.demodulate(modulated)

                gg1 = "".join([str(x) for x in list(demodulated.astype(numpy.int64))])

                k = text_from_bits(gg1)
            if value == random.randint(0, 100):
                l_list = ''
                k = 'АВАРИЯ'
                self.textBrowser.setText(str(k))
                fontt = QtGui.QFont()
                fontt.setPointSize(55)
                fontt.setBold(True)
                fontt.setWeight(200)
                font = QtGui.QFont()
                font.setPointSize(8)
                font.setBold(True)
                font.setWeight(200)
                Palette = QtGui.QPalette()
                Palette.setColor(QtGui.QPalette.Text, QtCore.Qt.red)
                self.lineEdit_3.setPalette(Palette)
                self.lineEdit_3.setFont(font)
                self.textBrowser.setPalette(Palette)
                self.textBrowser.setFont(fontt)
            self.lineEdit_3.setText(str(k))


    # КАМ-64

        if self.comboBox.currentText() == "КАМ-64":
            modem = QAMModem(64,
                             bin_input=True,
                             soft_decision=False,
                             bin_output=True)
            M=64
            N = np.log2(M)
            msg = text_to_bits(self.lineEdit.text())

            l_list = []
            for x in msg:
                for y in list(x):
                    l_list.append(y)

            if value > 14:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                else:
                    l_list[random_index] = '1'
            if value > 37:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'

                else:
                    l_list[random_index] = '1'
            if value > 58:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                else:
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
            g = [int(x) for x in l_list if x.isdigit()]

            while (len(g) % N) != 0:
                g.insert(0,0)
            modulated = modem.modulate(g)  # modulation
            if value > 71:
                l_list = ''
                k = 'АВАРИЯ'
                self.textBrowser.setText(str(k))
                fontt = QtGui.QFont()
                fontt.setPointSize(55)
                fontt.setBold(True)
                fontt.setWeight(200)
                font = QtGui.QFont()
                font.setPointSize(15)
                font.setBold(True)
                font.setWeight(200)
                Palette = QtGui.QPalette()
                Palette.setColor(QtGui.QPalette.Text, QtCore.Qt.red)
                self.lineEdit_3.setPalette(Palette)
                self.lineEdit_3.setFont(font)
                self.textBrowser.setPalette(Palette)
                self.textBrowser.setFont(fontt)
            else:
                self.textBrowser.setText(str(modulated))
                demodulated = modem.demodulate(modulated)

                gg1 = "".join([str(x) for x in list(demodulated.astype(numpy.int64))])

                k = text_from_bits(gg1)
            if value == random.randint(0, 100):
                l_list = ''
                k = 'АВАРИЯ'
                self.textBrowser.setText(str(k))
                fontt = QtGui.QFont()
                fontt.setPointSize(55)
                fontt.setBold(True)
                fontt.setWeight(200)
                font = QtGui.QFont()
                font.setPointSize(8)
                font.setBold(True)
                font.setWeight(200)
                Palette = QtGui.QPalette()
                Palette.setColor(QtGui.QPalette.Text, QtCore.Qt.red)
                self.lineEdit_3.setPalette(Palette)
                self.lineEdit_3.setFont(font)
                self.textBrowser.setPalette(Palette)
                self.textBrowser.setFont(fontt)
            self.lineEdit_3.setText(str(k))


        #КАМ-256

        if self.comboBox.currentText() == "КАМ-256":
            modem = QAMModem(256,
                             bin_input=True,
                             soft_decision=False,
                             bin_output=True)
            def text_to_bits(text, encoding='utf-8', errors='ignore'):
                bits = bin(int.from_bytes(text.encode(encoding, errors), 'big'))[2:]
                return bits.zfill(8 * ((len(bits) + 7) // 8))
            def text_from_bits(bits, encoding='utf-8', errors='ignore'):
                n = int(bits, 2)
                return n.to_bytes((n.bit_length() + 7) // 8, 'big').decode(encoding, errors) or '\0'
            msg = text_to_bits(self.lineEdit.text())

            l_list = []
            for x in msg:
                for y in list(x):
                    l_list.append(y)

            if value > 8:
                if l_list[-1]=='0':
                    l_list[-1] == '1'
                else:
                    l_list[-1] == '0'
            if value > 21:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                else:
                    l_list[random_index] = '1'
            if value > 38:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                else:
                    l_list[random_index] = '1'
            if value > 51:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                else:
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
            if value > 57:
                random_index = random.randint(0, len(l_list) - 1)
                if l_list[random_index] == '1':
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                else:
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '0'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
                    random_index = random.randint(0, len(l_list) - 1)
                    l_list[random_index] = '1'
            g = [int(x) for x in l_list if x.isdigit()]
            modulated = modem.modulate(g)  # modulation
            if value > 68:
                l_list = ''
                k = 'АВАРИЯ'
                self.textBrowser.setText(str(k))
                fontt = QtGui.QFont()
                fontt.setPointSize(55)
                fontt.setBold(True)
                fontt.setWeight(200)
                font = QtGui.QFont()
                font.setPointSize(15)
                font.setBold(True)
                font.setWeight(200)
                Palette = QtGui.QPalette()
                Palette.setColor(QtGui.QPalette.Text, QtCore.Qt.red)
                self.lineEdit_3.setPalette(Palette)
                self.lineEdit_3.setFont(font)
                self.textBrowser.setPalette(Palette)
                self.textBrowser.setFont(fontt)
            else:
                self.textBrowser.setText(str(modulated))
                demodulated = modem.demodulate(modulated)
                gg1 = "".join([str(x) for x in list(demodulated.astype(numpy.int64))])
                k = text_from_bits(gg1)
            if value == random.randint(0, 100):
                l_list = ''
                k = 'АВАРИЯ'
                self.textBrowser.setText(str(k))
                fontt = QtGui.QFont()
                fontt.setPointSize(55)
                fontt.setBold(True)
                fontt.setWeight(200)
                font = QtGui.QFont()
                font.setPointSize(15)
                font.setBold(True)
                font.setWeight(200)
                Palette = QtGui.QPalette()
                Palette.setColor(QtGui.QPalette.Text, QtCore.Qt.red)
                self.lineEdit_3.setPalette(Palette)
                self.lineEdit_3.setFont(font)
                self.textBrowser.setPalette(Palette)
                self.textBrowser.setFont(fontt)
            self.lineEdit_3.setText(str(k))
            (k)

    # MESSAGEBOX
        if self.comboBox.currentText() == "":
            error = QMessageBox()
            error.setWindowTitle("Ошибка")
            error.setText("Выберите вид модуляции")
            error.setIcon(QMessageBox.Warning)
            error.exec_()
        if self.lineEdit.text() == "":
            error = QMessageBox()
            error.setWindowTitle("Ошибка")
            error.setText("Введите сообщение")
            error.setIcon(QMessageBox.Warning)
            error.exec_()

    def click_4(self):
        if self.lineEdit_2.text() == "" or self.lineEdit_5.text() == "" or self.lineEdit_4.text() == "" or self.comboBox_2.currentText() == "":
            error = QMessageBox()
            error.setWindowTitle("Ошибка")
            error.setText("Введите значения для модуляции")
            error.setIcon(QMessageBox.Warning)
            error.exec_()
        else:
            def BER_calc(a, b):
                num_ber = np.sum(np.abs(a - b))
                ber = np.mean(np.abs(a - b))
                return int(num_ber), ber

            def BER_qam(M, EbNo):
                EbNo_lin = 10 ** (EbNo / 10)
                Q=self.comboBox_2.currentText()
                if M > int(Q):
                    P = 2 * np.sqrt((np.sqrt(M) - 1) /
                                    (np.sqrt(M) * np.log2(M))) * special.erfc(
                        np.sqrt(EbNo_lin * 3 * np.log2(M) / 2 * (M - 1)))
                else:
                    P = 0.5 * special.erfc(np.sqrt(EbNo_lin))
                return P

            EbNos = np.array([i for i in range(int(self.lineEdit_5.text()))])  # массив Eb/No в дБ Eb - энергия сигнала, приходящейся на 1 бит принимаемого сообщения
            # No энергетическая спектральная плотность шума (N0)
            N = int(self.lineEdit_2.text())# колл-во символов в кадре
            N_c = int(self.lineEdit_4.text())  # количество испытаний

            Ms = [4, 16, 64, 256]  # порядок модуляции

            error = QMessageBox()
            error.setWindowTitle("Внимание")
            error.setText("Подождите, идет построение графика...")
            error.setIcon(QMessageBox.Information)
            error.exec_()
            ''' Simulation loops '''
            mean_BER = np.empty((len(EbNos), len(Ms)))
            for idxM, M in enumerate(Ms):
                BER = np.empty((N_c,))
                k = np.log2(M)  # количество бит на символ модуляции

                modem = QAMModem(M,
                                 bin_input=True,
                                 soft_decision=False,
                                 bin_output=True)

                for idxEbNo, EbNo in enumerate(EbNos):
                    # ("Eb/No: ", EbNo)
                    snrdB = EbNo + 10 * np.log10(k)  # Отношение сигнал/шум (в дБ)
                    noiseVar = 10 ** (-snrdB / 10)  # дисперсия шума (мощность)


                    for cntr in range(N_c):
                        message_bits = np.random.randint(0, 2, int(N * k))  # message
                        modulated = modem.modulate(message_bits)  # modulation

                        Es = np.mean(np.abs(modulated) ** 2)  # энергия символа
                        No = Es / ((10 ** (EbNo / 10)) * np.log2(M))  # плотность спектра шума

                        noisy = modulated + np.sqrt(No / 2) * \
                                (np.random.randn(modulated.shape[0]) +
                                 1j * np.random.randn(modulated.shape[0]))  # АБГШ

                        demodulated = modem.demodulate(noisy, noise_var=noiseVar)
                        NumErr, BER[cntr] = BER_calc(message_bits,
                                                     demodulated)  # коэффициент битовых ошибок
                    mean_BER[idxEbNo, idxM] = np.mean(BER, axis=0)  # усредненный коэффициент битовых ошибок

            ''' Theoretical results '''

            BER_theor = np.empty((len(EbNos), len(Ms)))
            for idxM, M in enumerate(Ms):
                BER_theor[:, idxM] = BER_qam(M, EbNos)

            ''' Curves '''

            fig, ax = plt.subplots(figsize=(10, 6), dpi=100)

            plt.semilogy(EbNos, BER_theor[:, 0], 'g-', label='4-КАМ (теоретический результат)')
            plt.semilogy(EbNos, BER_theor[:, 1], 'b-', label='16-КАМ (теоретический результат)')
            plt.semilogy(EbNos, BER_theor[:, 2], 'k-', label='64-КАМ (теоретический результат)')
            plt.semilogy(EbNos, BER_theor[:, 3], 'r-', label='256-КАМ (теоретический результат)')

            plt.semilogy(EbNos, mean_BER[:, 0], 'g-o', label='4-КАМ (смоделированный результат)')
            plt.semilogy(EbNos, mean_BER[:, 1], 'b-o', label='16-КАМ (смоделированный результат)')
            plt.semilogy(EbNos, mean_BER[:, 2], 'k-o', label='64-КАМ (смоделированный результат)')
            plt.semilogy(EbNos, mean_BER[:, 3], 'r-o', label='256-КАМ (смоделированный результат)')

            ax.set_ylim(1e-7, 2)
            ax.set_xlim(0, 25.1)
            plt.title("M-КАМ")
            plt.xlabel('Eb/No (dB)')
            plt.ylabel('BER')
            plt.grid()
            plt.legend(loc='upper right')
            plt.show()
